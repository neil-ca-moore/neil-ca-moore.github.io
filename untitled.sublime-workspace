{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"attr",
				"attributes"
			],
			[
				"game",
				"gameState"
			],
			[
				"gma",
				"gameStateView"
			],
			[
				"Gam",
				"gameState"
			],
			[
				"I",
				"LastIndex	int ƒ"
			],
			[
				"Ty",
				"TypeOf	reflect.Type ƒ"
			],
			[
				"Post",
				"PostGridScorerResponse	struct ʈ"
			],
			[
				"StatusRes",
				"StatusBadRequest	 Ɩ"
			],
			[
				"Li",
				"Lifespan	int ƒ"
			],
			[
				"scoo",
				"scoot-http"
			],
			[
				"Print",
				"Printf	n int, err error ƒ"
			],
			[
				"Statu",
				"StatusInternalServerError	 Ɩ"
			],
			[
				"Parse",
				"ParseInt	i int64, err error ƒ"
			],
			[
				"StatusBad",
				"StatusBadRequest	 Ɩ"
			],
			[
				"Maxint",
				"MaxInt32	 Ɩ"
			],
			[
				"max",
				"MaxInt32	 Ɩ"
			],
			[
				"Life",
				"LifespanVal	int ν"
			],
			[
				"MaxInt",
				"MaxInt32	 Ɩ"
			],
			[
				"Is",
				"IsModify	bool ƒ"
			],
			[
				"FS",
				"FSEvent	struct ʈ"
			],
			[
				"New",
				"NewQueueChecker	*QueueChecker ƒ"
			],
			[
				"Update",
				"UpdateError	struct ʈ"
			],
			[
				"P",
				"Println	n int, err error ƒ"
			],
			[
				"main",
				"func main	func main {...} ʂ"
			],
			[
				"imp",
				"import	import (...) ʂ"
			],
			[
				"rem",
				"remaining_dice"
			]
		]
	},
	"buffers":
	[
		{
			"file": "_config.yml",
			"settings":
			{
				"buffer_size": 384,
				"line_ending": "Unix"
			}
		},
		{
			"file": "README",
			"settings":
			{
				"buffer_size": 94,
				"line_ending": "Unix",
				"name": "http://kramdown.gettalong.org/syntax.html"
			}
		},
		{
			"file": "about.md",
			"settings":
			{
				"buffer_size": 392,
				"line_ending": "Unix"
			}
		},
		{
			"file": "publications.md",
			"settings":
			{
				"buffer_size": 3565,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_posts/2014-11-19-vector-append.markdown",
			"settings":
			{
				"buffer_size": 3861,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_posts/2014-11-30-objects-and-pointers.markdown",
			"settings":
			{
				"buffer_size": 8925,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_posts/obj_ptrs_1_code/sixth.cpp",
			"settings":
			{
				"buffer_size": 443,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_posts/obj_ptrs_2_code/unique.cpp",
			"settings":
			{
				"buffer_size": 588,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_posts/obj_ptrs_2_code/type_erasure_with_inherit.cpp",
			"settings":
			{
				"buffer_size": 1213,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_posts/obj_ptrs_2_code/type_erasure.cpp",
			"settings":
			{
				"buffer_size": 798,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_posts/obj_ptrs_1_code/fifth.cpp",
			"settings":
			{
				"buffer_size": 628,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_posts/obj_ptrs_1_code/fourth.cpp",
			"settings":
			{
				"buffer_size": 176,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_posts/obj_ptrs_1_code/third.cpp",
			"settings":
			{
				"buffer_size": 261,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_posts/obj_ptrs_1_code/second.cpp",
			"settings":
			{
				"buffer_size": 163,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_posts/obj_ptrs_1_code/first.cpp",
			"settings":
			{
				"buffer_size": 162,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_posts/obj_ptrs_1_code/earlydefs.hpp",
			"settings":
			{
				"buffer_size": 388,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include <iostream>\n#include <memory>\n#include <utility>\n#include <vector>\n\nclass ConcretePrinter {\npublic:\n     void Print() const { std::cout << \"ConcretePrinter\" << std::endl; }   \n};\n\nclass StonePrinter {\npublic:\n     void Print() const { std::cout << \"StonePrinter\" << std::endl; }     \n};\n\nclass AnyPrinter {\npublic:\n    template <typename T>\n    AnyPrinter(T x) : self_(std::make_shared<model<T>>(std::move(x))) {}\n \n    void Print() const\n    { self_->Print_(); }\n \nprivate:\n    struct concept_t {\n        virtual ~concept_t() = default;\n        virtual void Print_() const = 0;\n    };\n    template <typename T>\n    struct model : concept_t {\n        model(T x) : data_(std::move(x)) {}\n        void Print_() const override\n        { data_.Print(); }\n \n        T data_;\n    };\n   \n    std::shared_ptr<const concept_t> self_;\n};\n\nint main()\n{\n    ConcretePrinter cp;\n    \n    StonePrinter sp;\n\n    std::vector<AnyPrinter> printables;\n    printables.push_back(cp); //pushing copies\n    printables.push_back(sp);\n\n    for(const auto& p : printables) {\n        p.Print();\n    }\n}",
			"file": "_posts/obj_ptrs_2_code/wrapper.hpp",
			"file_size": 1083,
			"file_write_time": 130827594650000000,
			"settings":
			{
				"buffer_size": 1083,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include <boost/type_erasure/any.hpp>\n#include <boost/type_erasure/member.hpp>\n#include <iostream>\n#include <vector>\n\nusing namespace boost::type_erasure;\n\nclass ConcretePrinter {\npublic:\n	 void Print() const { std::cout << \"ConcretePrinter\" << std::endl; }		\n};\n\nclass StonePrinter {\npublic:\n	 void Print() const { std::cout << \"StonePrinter\" << std::endl; }		\n};\n\nBOOST_TYPE_ERASURE_MEMBER((has_print), Print, 0)\n\ntypedef any<has_print<void()>, _self&> AnyPrinter;\n\nint main()\n{\n	ConcretePrinter cp;\n	\n	StonePrinter sp;\n\n	std::vector<AnyPrinter> printables;\n	printables.push_back(cp); //pushing copies\n	printables.push_back(sp);\n\n	for(const auto& p : printables) {\n		p.Print();\n	}\n}\n",
			"file": "_posts/obj_ptrs_2_code/type_erasure.hpp",
			"file_size": 685,
			"file_write_time": 130827579380000000,
			"settings":
			{
				"buffer_size": 685,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\n#include <iostream>\n#include <memory>\n#include <vector>\n\nclass Printer {\npublic:\n	virtual void Print() const { std::cout << \"Printer\" << std::endl; }		\n};\n\nclass ConcretePrinter {\npublic:\n	virtual void Print() const { std::cout << \"ConcretePrinter\" << std::endl; }		\n};\n\nclass StonePrinter {\npublic:\n	virtual void Print() const { std::cout << \"StonePrinter\" << std::endl; }		\n};\n\nint main()\n{\n	std::unique_ptr<ConcretePrinter> cp(std::make_unique<ConcretePrinter>());\n	\n	std::unique_ptr<StonePrinter> sp(std::make_unique<StonePrinter>());\n\n	std::vector<std::unique_ptr<Printer>> doesntWork;\n	//doesntWork.push_back(cp); //won't compile\n	//doesntWork.push_back(sp); //won't compile\n}",
			"file": "_posts/obj_ptrs_2_code/unique_hetero.hpp",
			"file_size": 683,
			"file_write_time": 130827581210000000,
			"settings":
			{
				"buffer_size": 683,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_posts/2015-03-16-wedding-honeymoon.markdown",
			"settings":
			{
				"buffer_size": 7813,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_posts/2015-03-29-TT-scorer.markdown",
			"settings":
			{
				"buffer_size": 8737,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_posts/2015-04-6-types.markdown",
			"settings":
			{
				"buffer_size": 8672,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_posts/2015-06-10-objects-and-pointers-2.markdown",
			"settings":
			{
				"buffer_size": 4523,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_posts/2015-08-10-talk-slides.markdown",
			"settings":
			{
				"buffer_size": 479,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "---\nlayout: post\ntitle:  \"Objects and pointers part II\"\ndate:   2015-7-21 21:29:19\ncategories: c++\n---\n\n<!--\nOutline:\n\n- static polymorphism\n - set the scene\n  - value semantics\n  - polymorphism\n  - not polymorphism\n - unique_ptr\n  - cannot go into homogeneous container\n  - assignment doesn't work as expected\n - hand rolled\n - boost any\n-->\n\nI described in a [previous post]({% post_url 2014-11-30-objects-and-pointers %}) how difficult it is to work with dynamic dispatch in c++. I described various ways to deal with it. However I've been reading about an even more powerful and easy to use way to do things.\n\nLets say that I want the following properties of a variable for an object:\n\n* dynamic dispatch of its methods\n* memory safety\n\nWe can achieve combinations of those properties using the techniques I described last time: i.e. use of safe pointers (dynamic dispatch + memory safety), CRTP (memory safety and inheritance but dispatch done statically) or inclusion (memory safety but static dispatch and no inheritance).\n\nHowever my eyes have been opened a bit after watching Sean Parent's talk called [\"C++ seasoning\"](http://channel9.msdn.com/Events/GoingNative/2013/Cpp-Seasoning). Now I also want to achieve *value semantics*. Value semantics means that assigning a value to a different variable copies it (or, with std::move, moves it without copying). The opposite is reference semantics meaning that only the pointer is copied. With value semantics a value is guaranteed to be the sole way to access the corresponding area of memory.\n\n{% highlight c++ linenos %}\n{% include_relative obj_ptrs_2_code/value.cpp %}\n{% endhighlight %}\n\nUsing value semantics helps to make code easy to understand, since you don't need to check what other variables (possibly on other threads) might be sharing the same data. There is no sharing.\n\nAlso you don't have to worry about cleaning up pointers any longer, because there are none. \n\nI said in my earlier post that in C++ polymorphism is only available via a pointer/reference variable. That is true, but there are a variety of techniques to maintain value semantics without losing polymorphism, and the purpose of this post is to describe those.\n\nunique_ptr\n===========\nThe simplest way to get closer to value semantics with pointers is definitely std::unique_ptr. An area of memory is guaranteed to be uniquely owned. \n\n{% highlight c++ linenos %}\n{% include_relative obj_ptrs_2_code/unique.cpp %}\n{% endhighlight %}\n\nHowever we haven't really achieved proper value semantics, because assigning a value doesn't work and we have to move it around explicitly.\n\nLet's look for a better solution.\n\nHand rolled value semantics with polymorphism\n=============================================\n\nLets make a type with value semantics that can take anything with a Print() method:\n\n{% highlight c++ linenos %}\n{% include_relative obj_ptrs_2_code/wrapper.cpp %}\n{% endhighlight %}\n\nThere is no such thing as a free lunch though. Polymorphism is still achieved using a pointer, but it is hidden away so that it doesn't contaminate client code.\n\nWe get value semantics. There is no inheritance in the printable objects. We can also make heterogeneous containers.\n\nboost type_erasure\n==================\n\nThe only problem is that the code is rather long and laborious, every time we have a different concept, we would have to define 3 new classes for it.\n\nLet's check out boost::type_erasure to make it short and sweet.\n\n{% highlight c++ linenos %}\n{% include_relative obj_ptrs_2_code/type_erasure.cpp %}\n{% endhighlight %}\n\nConclusion\n========\n\nNormally in C++, polymorphism brings an unwelcome friend along with it - pointers. But I've described a couple of ways to get polymorphism without pointers being in view (at least in the client code).\n\n\nReferences\n==========\n[Boost.TypeErasure](http://www.boost.org/doc/libs/1_58_0/doc/html/boost_typeerasure.html)\n\n[C++ Seasoning](http://channel9.msdn.com/Events/GoingNative/2013/Cpp-Seasoning)\n\nC++ in a nutshell - O'Reilly\n\n[Inheritance is the Base Class of Evil code sample](https://gist.github.com/berkus/7041546)\n\n[Intrusive value semantic polymorphism example.](https://gist.github.com/sean-parent/6798797)\n\n[Value semantics](https://akrzemi1.wordpress.com/2012/02/03/value-semantics/)\n\n[What is value semantics?](https://isocpp.org/wiki/faq/value-vs-ref-semantics#val-vs-ref-semantics)\n\n[Minion AnyVarRef](https://bitbucket.org/stacs_cp/minion/src/c64e2526b4b0156b9881e3ebe0fc9d55709335aa/minion/variables/AnyVarRef.h?at=default)\n",
			"file": "_posts/2015-06-10-objects-and-pointers-2 copy.markdown",
			"file_size": 4523,
			"file_write_time": 130830012750000000,
			"settings":
			{
				"buffer_size": 4523,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include <iostream>\n#include <memory>\n\nclass Printer {\npublic:\n	virtual void Print() const { std::cout << \"Printer\" << std::endl; }	\n};\n\nclass ConcretePrinter : public Printer {\npublic:\n	virtual void Print() const { std::cout << \"ConcretePrinter\" << std::endl; }		\n};\n\nint main()\n{\n	std::unique_ptr<ConcretePrinter> cp(std::make_unique<ConcretePrinter>());\n	cp->Print(); //prints: ConcretePrinter\n	\n	//std::unique_ptr<ConcretePrinter> notACopy = cp; //doesn't work\n	\n	std::unique_ptr<ConcretePrinter> notACopy2 = std::move(cp);\n	notACopy2->Print(); //prints: ConcretePrinter\n	\n	cp->Print(); //dangerous, cp isn't there any more\n}\n",
			"file": "_posts/obj_ptrs_2_code/unique.hpp",
			"file_size": 630,
			"file_write_time": 130827592820000000,
			"settings":
			{
				"buffer_size": 630,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/neilmoore67/Work/scala-cource/doodle-develop/README.md",
			"settings":
			{
				"buffer_size": 2350,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Gemfile",
			"settings":
			{
				"buffer_size": 92,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_site/personal/2015/03/16/wedding-honeymoon.html",
			"settings":
			{
				"buffer_size": 15937,
				"line_ending": "Unix"
			}
		},
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 539,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_layouts/default.html",
			"settings":
			{
				"buffer_size": 248,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_includes/analytics.html",
			"settings":
			{
				"buffer_size": 408,
				"line_ending": "Unix",
				"name": "<script>"
			}
		},
		{
			"file": "_includes/mailchimp.html",
			"settings":
			{
				"buffer_size": 616,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_layouts/post.html",
			"settings":
			{
				"buffer_size": 1220,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_includes/head.html",
			"settings":
			{
				"buffer_size": 1002,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_includes/footer.html",
			"settings":
			{
				"buffer_size": 3100,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 41 files for \"site-footer\"\n\n~/Work/personal-homepage/.sass-cache/ab29c69f31c5ee58a420e5d8d1fac56b782c1302/_layout.scssc:\n    <binary>\n\n/Users/neilmoore67/Work/personal-homepage/_includes/footer.html:\n    1: <footer class=\"site-footer\">\n    2  \n    3    <div class=\"wrapper\">\n\n/Users/neilmoore67/Work/personal-homepage/_sass/_layout.scss:\n   92   * Site footer\n   93   */\n   94: .site-footer {\n   95      border-top: 1px solid $grey-color-light;\n   96      padding: $spacing-unit 0;\n\n/Users/neilmoore67/Work/personal-homepage/_site/index.html:\n  113      </div>\n  114  \n  115:     <footer class=\"site-footer\">\n  116  \n  117    <div class=\"wrapper\">\n\n/Users/neilmoore67/Work/personal-homepage/_site/about/index.html:\n   96      </div>\n   97  \n   98:     <footer class=\"site-footer\">\n   99  \n  100    <div class=\"wrapper\">\n\n/Users/neilmoore67/Work/personal-homepage/_site/c++/2014/11/19/2014-11-19-vector-append.html:\n  186      </div>\n  187  \n  188:     <footer class=\"site-footer\">\n  189  \n  190    <div class=\"wrapper\">\n\n/Users/neilmoore67/Work/personal-homepage/_site/css/main.css:\n  206   * Site footer\n  207   */\n  208: .site-footer {\n  209    border-top: 1px solid #e8e8e8;\n  210    padding: 30px 0; }\n\n/Users/neilmoore67/Work/personal-homepage/_site/food/2014/11/13/dinner.html:\n  124      </div>\n  125  \n  126:     <footer class=\"site-footer\">\n  127  \n  128    <div class=\"wrapper\">\n\n/Users/neilmoore67/Work/personal-homepage/_site/pub/index.html:\n  236      </div>\n  237  \n  238:     <footer class=\"site-footer\">\n  239  \n  240    <div class=\"wrapper\">\n\n11 matches across 9 files\n\n\nSearching 41 files for \"site-headers\"\n\n0 matches across 0 files\n\n\nSearching 41 files for \"site-header\"\n\n~/Work/personal-homepage/.sass-cache/ab29c69f31c5ee58a420e5d8d1fac56b782c1302/_layout.scssc:\n    <binary>\n\n/Users/neilmoore67/Work/personal-homepage/_includes/header.html:\n    1: <header class=\"site-header\">\n    2  \n    3    <div class=\"wrapper\">\n\n/Users/neilmoore67/Work/personal-homepage/_sass/_layout.scss:\n    2   * Site header\n    3   */\n    4: .site-header {\n    5      border-top: 5px solid $grey-color-dark;\n    6      border-bottom: 1px solid $grey-color-light;\n\n/Users/neilmoore67/Work/personal-homepage/_site/index.html:\n   30    <body>\n   31  \n   32:     <header class=\"site-header\">\n   33  \n   34    <div class=\"wrapper\">\n\n/Users/neilmoore67/Work/personal-homepage/_site/about/index.html:\n   30    <body>\n   31  \n   32:     <header class=\"site-header\">\n   33  \n   34    <div class=\"wrapper\">\n\n/Users/neilmoore67/Work/personal-homepage/_site/c++/2014/11/19/2014-11-19-vector-append.html:\n   29    <body>\n   30  \n   31:     <header class=\"site-header\">\n   32  \n   33    <div class=\"wrapper\">\n\n/Users/neilmoore67/Work/personal-homepage/_site/css/main.css:\n  146   * Site header\n  147   */\n  148: .site-header {\n  149    border-top: 5px solid #424242;\n  150    border-bottom: 1px solid #e8e8e8;\n\n/Users/neilmoore67/Work/personal-homepage/_site/food/2014/11/13/dinner.html:\n   29    <body>\n   30  \n   31:     <header class=\"site-header\">\n   32  \n   33    <div class=\"wrapper\">\n\n/Users/neilmoore67/Work/personal-homepage/_site/pub/index.html:\n   30    <body>\n   31  \n   32:     <header class=\"site-header\">\n   33  \n   34    <div class=\"wrapper\">\n\n11 matches across 9 files\n\n\nSearching 92 files for \"post_url\"\n\n/Users/neilmoore67/Work/personal-homepage/_posts/2015-06-10-objects-and-pointers-2.markdown:\n   21  -->\n   22  \n   23: I described in a [previous post]({% post_url 2014-11-30-objects-and-pointers %}) how difficult it is to work with dynamic dispatch in c++. I described various ways to deal with it. However I've been reading about an even more powerful and easy to use way to do things.\n   24  \n   25  Lets say that I want the following properties of a variable for an object:\n\n/Users/neilmoore67/Work/personal-homepage/_drafts/2015-06-10-objects-and-pointers-2.markdown:\n   21  -->\n   22  \n   23: I described in a [previous post]({% post_url 2014-11-30-objects-and-pointers %}) how difficult it is to work with dynamic dispatch in c++. I described various ways to deal with it. However I've been reading about an even more powerful and easy to use way to do things.\n   24  \n   25  Lets say that I want the following properties of a variable for an object:\n\n2 matches across 2 files\n\n\nSearching 86 files for \"std::unique_ptr\"\n\n/Users/neilmoore67/Work/personal-homepage/_posts/2015-06-10-objects-and-pointers-2.markdown:\n   44  unique_ptr\n   45  ===========\n   46: The simplest way to get closer to value semantics with pointers is definitely std::unique_ptr. An area of memory is guaranteed to be uniquely owned. \n   47  \n   48  {% highlight c++ linenos %}\n\n/Users/neilmoore67/Work/personal-homepage/_posts/obj_ptrs_2_code/unique.hpp:\n   14  int main()\n   15  {\n   16: 	std::unique_ptr<ConcretePrinter> cp(std::make_unique<ConcretePrinter>());\n   17  	cp->Print(); //prints: ConcretePrinter\n   18  	\n   19: 	//std::unique_ptr<ConcretePrinter> notACopy = cp; //doesn't work\n   20  	\n   21: 	std::unique_ptr<ConcretePrinter> notACopy2 = std::move(cp);\n   22  	notACopy2->Print(); //prints: ConcretePrinter\n   23  	\n\n/Users/neilmoore67/Work/personal-homepage/_posts/obj_ptrs_2_code/unique_hetero.hpp:\n   21  int main()\n   22  {\n   23: 	std::unique_ptr<ConcretePrinter> cp(std::make_unique<ConcretePrinter>());\n   24  	\n   25: 	std::unique_ptr<StonePrinter> sp(std::make_unique<StonePrinter>());\n   26  \n   27: 	std::vector<std::unique_ptr<Printer>> doesntWork;\n   28  	//doesntWork.push_back(cp); //won't compile\n   29  	//doesntWork.push_back(sp); //won't compile\n\n/Users/neilmoore67/Work/personal-homepage/_site/feed.xml:\n   67  \n   68  &lt;h1 id=&quot;uniqueptr&quot;&gt;unique_ptr&lt;/h1&gt;\n   69: &lt;p&gt;The simplest way to get closer to value semantics with pointers is definitely std::unique_ptr. An area of memory is guaranteed to be uniquely owned.&lt;/p&gt;\n   70  \n   71  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;\n   ..\n   87  &lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//prints: ConcretePrinter&lt;/span&gt;\n   88  &lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; 	\n   89: &lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; 	&lt;span class=&quot;c1&quot;&gt;//std::unique_ptr&amp;lt;ConcretePrinter&amp;gt; notACopy = cp; //doesn&amp;#39;t work&lt;/span&gt;\n   90  &lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt; 	\n   91  &lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique_ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConcretePrinter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notACopy2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n/Users/neilmoore67/Work/personal-homepage/_site/c++/2015/07/21/objects-and-pointers-2.html:\n  146  \n  147  <h1 id=\"uniqueptr\">unique_ptr</h1>\n  148: <p>The simplest way to get closer to value semantics with pointers is definitely std::unique_ptr. An area of memory is guaranteed to be uniquely owned.</p>\n  149  \n  150  <div class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"lineno\"> 1</span> <span class=\"cp\">#include &lt;iostream&gt;</span>\n  ...\n  166  <span class=\"lineno\">17</span> 	<span class=\"n\">cp</span><span class=\"o\">-&gt;</span><span class=\"n\">Print</span><span class=\"p\">();</span> <span class=\"c1\">//prints: ConcretePrinter</span>\n  167  <span class=\"lineno\">18</span> 	\n  168: <span class=\"lineno\">19</span> 	<span class=\"c1\">//std::unique_ptr&lt;ConcretePrinter&gt; notACopy = cp; //doesn&#39;t work</span>\n  169  <span class=\"lineno\">20</span> 	\n  170  <span class=\"lineno\">21</span> 	<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">ConcretePrinter</span><span class=\"o\">&gt;</span> <span class=\"n\">notACopy2</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">cp</span><span class=\"p\">);</span>\n\n/Users/neilmoore67/Work/personal-homepage/_drafts/unique_hetero.hpp:\n   21  int main()\n   22  {\n   23: 	std::unique_ptr<ConcretePrinter> cp(new ConcretePrinter());\n   24  	\n   25: 	std::unique_ptr<StonePrinter> sp(new StonePrinter());\n   26  \n   27: 	std::vector<std::unique_ptr<Printer>> doesntWork;\n   28  	//doesntWork.push_back(cp); //won't compile\n   29  	//doesntWork.push_back(sp); //won't compile\n\n14 matches across 6 files\n\n\nSearching 82 files for \"std::unique_ptr\"\n\n/Users/neilmoore67/Work/personal-homepage/_posts/2015-06-10-objects-and-pointers-2.markdown:\n   44  unique_ptr\n   45  ===========\n   46: The simplest way to get closer to value semantics with pointers is definitely std::unique_ptr. An area of memory is guaranteed to be uniquely owned. \n   47  \n   48  {% highlight c++ linenos %}\n\n/Users/neilmoore67/Work/personal-homepage/_posts/obj_ptrs_2_code/unique.hpp:\n   14  int main()\n   15  {\n   16: 	std::unique_ptr<ConcretePrinter> cp(std::make_unique<ConcretePrinter>());\n   17  	cp->Print(); //prints: ConcretePrinter\n   18  	\n   19: 	//std::unique_ptr<ConcretePrinter> notACopy = cp; //doesn't work\n   20  	\n   21: 	std::unique_ptr<ConcretePrinter> notACopy2 = std::move(cp);\n   22  	notACopy2->Print(); //prints: ConcretePrinter\n   23  	\n\n/Users/neilmoore67/Work/personal-homepage/_posts/obj_ptrs_2_code/unique_hetero.hpp:\n   21  int main()\n   22  {\n   23: 	std::unique_ptr<ConcretePrinter> cp(std::make_unique<ConcretePrinter>());\n   24  	\n   25: 	std::unique_ptr<StonePrinter> sp(std::make_unique<StonePrinter>());\n   26  \n   27: 	std::vector<std::unique_ptr<Printer>> doesntWork;\n   28  	//doesntWork.push_back(cp); //won't compile\n   29  	//doesntWork.push_back(sp); //won't compile\n\n/Users/neilmoore67/Work/personal-homepage/_site/feed.xml:\n   67  \n   68  &lt;h1 id=&quot;uniqueptr&quot;&gt;unique_ptr&lt;/h1&gt;\n   69: &lt;p&gt;The simplest way to get closer to value semantics with pointers is definitely std::unique_ptr. An area of memory is guaranteed to be uniquely owned.&lt;/p&gt;\n   70  \n   71  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;\n   ..\n   87  &lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//prints: ConcretePrinter&lt;/span&gt;\n   88  &lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; 	\n   89: &lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; 	&lt;span class=&quot;c1&quot;&gt;//std::unique_ptr&amp;lt;ConcretePrinter&amp;gt; notACopy = cp; //doesn&amp;#39;t work&lt;/span&gt;\n   90  &lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt; 	\n   91  &lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique_ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConcretePrinter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notACopy2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n/Users/neilmoore67/Work/personal-homepage/_site/c++/2015/07/21/objects-and-pointers-2.html:\n  146  \n  147  <h1 id=\"uniqueptr\">unique_ptr</h1>\n  148: <p>The simplest way to get closer to value semantics with pointers is definitely std::unique_ptr. An area of memory is guaranteed to be uniquely owned.</p>\n  149  \n  150  <div class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"lineno\"> 1</span> <span class=\"cp\">#include &lt;iostream&gt;</span>\n  ...\n  166  <span class=\"lineno\">17</span> 	<span class=\"n\">cp</span><span class=\"o\">-&gt;</span><span class=\"n\">Print</span><span class=\"p\">();</span> <span class=\"c1\">//prints: ConcretePrinter</span>\n  167  <span class=\"lineno\">18</span> 	\n  168: <span class=\"lineno\">19</span> 	<span class=\"c1\">//std::unique_ptr&lt;ConcretePrinter&gt; notACopy = cp; //doesn&#39;t work</span>\n  169  <span class=\"lineno\">20</span> 	\n  170  <span class=\"lineno\">21</span> 	<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">ConcretePrinter</span><span class=\"o\">&gt;</span> <span class=\"n\">notACopy2</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">cp</span><span class=\"p\">);</span>\n\n11 matches across 5 files\n\n\nSearching 82 files for \"std::unique_ptr\"\n\n/Users/neilmoore67/Work/personal-homepage/_posts/2015-06-10-objects-and-pointers-2.markdown:\n   44  unique_ptr\n   45  ===========\n   46: The simplest way to get closer to value semantics with pointers is definitely std::unique_ptr. An area of memory is guaranteed to be uniquely owned. \n   47  \n   48  {% highlight c++ linenos %}\n\n/Users/neilmoore67/Work/personal-homepage/_posts/obj_ptrs_2_code/unique.hpp:\n   14  int main()\n   15  {\n   16: 	std::unique_ptr<ConcretePrinter> cp(std::make_unique<ConcretePrinter>());\n   17  	cp->Print(); //prints: ConcretePrinter\n   18  	\n   19: 	//std::unique_ptr<ConcretePrinter> notACopy = cp; //doesn't work\n   20  	\n   21: 	std::unique_ptr<ConcretePrinter> notACopy2 = std::move(cp);\n   22  	notACopy2->Print(); //prints: ConcretePrinter\n   23  	\n\n/Users/neilmoore67/Work/personal-homepage/_posts/obj_ptrs_2_code/unique_hetero.hpp:\n   21  int main()\n   22  {\n   23: 	std::unique_ptr<ConcretePrinter> cp(std::make_unique<ConcretePrinter>());\n   24  	\n   25: 	std::unique_ptr<StonePrinter> sp(std::make_unique<StonePrinter>());\n   26  \n   27: 	std::vector<std::unique_ptr<Printer>> doesntWork;\n   28  	//doesntWork.push_back(cp); //won't compile\n   29  	//doesntWork.push_back(sp); //won't compile\n\n/Users/neilmoore67/Work/personal-homepage/_site/feed.xml:\n   67  \n   68  &lt;h1 id=&quot;uniqueptr&quot;&gt;unique_ptr&lt;/h1&gt;\n   69: &lt;p&gt;The simplest way to get closer to value semantics with pointers is definitely std::unique_ptr. An area of memory is guaranteed to be uniquely owned.&lt;/p&gt;\n   70  \n   71  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;\n   ..\n   87  &lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//prints: ConcretePrinter&lt;/span&gt;\n   88  &lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; 	\n   89: &lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; 	&lt;span class=&quot;c1&quot;&gt;//std::unique_ptr&amp;lt;ConcretePrinter&amp;gt; notACopy = cp; //doesn&amp;#39;t work&lt;/span&gt;\n   90  &lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt; 	\n   91  &lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt; 	&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique_ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConcretePrinter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notACopy2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n/Users/neilmoore67/Work/personal-homepage/_site/c++/2015/07/21/objects-and-pointers-2.html:\n  146  \n  147  <h1 id=\"uniqueptr\">unique_ptr</h1>\n  148: <p>The simplest way to get closer to value semantics with pointers is definitely std::unique_ptr. An area of memory is guaranteed to be uniquely owned.</p>\n  149  \n  150  <div class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"lineno\"> 1</span> <span class=\"cp\">#include &lt;iostream&gt;</span>\n  ...\n  166  <span class=\"lineno\">17</span> 	<span class=\"n\">cp</span><span class=\"o\">-&gt;</span><span class=\"n\">Print</span><span class=\"p\">();</span> <span class=\"c1\">//prints: ConcretePrinter</span>\n  167  <span class=\"lineno\">18</span> 	\n  168: <span class=\"lineno\">19</span> 	<span class=\"c1\">//std::unique_ptr&lt;ConcretePrinter&gt; notACopy = cp; //doesn&#39;t work</span>\n  169  <span class=\"lineno\">20</span> 	\n  170  <span class=\"lineno\">21</span> 	<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">unique_ptr</span><span class=\"o\">&lt;</span><span class=\"n\">ConcretePrinter</span><span class=\"o\">&gt;</span> <span class=\"n\">notACopy2</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">cp</span><span class=\"p\">);</span>\n\n11 matches across 5 files\n",
			"settings":
			{
				"buffer_size": 18575,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "_sass/_layout.scss",
			"settings":
			{
				"buffer_size": 4374,
				"line_ending": "Unix"
			}
		},
		{
			"file": "untitled.sublime-project",
			"settings":
			{
				"buffer_size": 73,
				"line_ending": "Unix"
			}
		},
		{
			"file": "_sass/_syntax-highlighting.scss",
			"settings":
			{
				"buffer_size": 3946,
				"line_ending": "Unix"
			}
		},
		{
			"file": "CNAME",
			"settings":
			{
				"buffer_size": 15,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 187.0,
		"last_filter": "markdown",
		"selected_items":
		[
			[
				"markdown",
				"Markdown Preview: Preview in Browser"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"gofm",
				"GoSublime: Fmt and save"
			],
			[
				"gofmt",
				"GoSublime: Fmt and save"
			],
			[
				"fmt",
				"GoSublime: Fmt the current file (without saving it)"
			],
			[
				"Package Control: instal",
				"Package Control: Install Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"test",
				"Snippet: test"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/neilmoore67/Work/personal-homepage",
		"/Users/neilmoore67/Work/personal-homepage/_drafts",
		"/Users/neilmoore67/Work/personal-homepage/_includes",
		"/Users/neilmoore67/Work/personal-homepage/_posts",
		"/Users/neilmoore67/Work/personal-homepage/_sass",
		"/Users/neilmoore67/Work/personal-homepage/css"
	],
	"file_history":
	[
		"/Users/neilmoore67/Work/personal-homepage/_drafts/2014-11-30-objects-and-pointers.markdown",
		"/Users/neilmoore67/Work/personal-homepage/_drafts/type_erasure.hpp",
		"/Users/neilmoore67/Work/personal-homepage/_drafts/value.hpp",
		"/Users/neilmoore67/Work/personal-homepage/_drafts/wrapper.hpp",
		"/Users/neilmoore67/Work/personal-homepage/_drafts/unique_hetero.hpp",
		"/Users/neilmoore67/Work/personal-homepage/_drafts/2015-06-10-objects-and-pointers-2.markdown",
		"/Users/neilmoore67/Work/personal-homepage/_posts/2015-06-10-objects-and-pointers-2.markdown",
		"/Users/neilmoore67/Work/personal-homepage/unique.hpp",
		"/Users/neilmoore67/Work/personal-homepage/unique_hetero.hpp",
		"/Users/neilmoore67/Work/personal-homepage/non-virtual-objects.hpp",
		"/Users/neilmoore67/Work/personal-homepage/_plugins/thumbnail.rb",
		"/Users/neilmoore67/Work/personal-homepage/css/lightbox.css",
		"/Users/neilmoore67/Library/Application Support/Sublime Text 3/Packages/GoSublime/CHANGELOG.md",
		"/Users/neilmoore67/Work/personal-homepage/_drafts/2014-11-19-vector-append.markdown",
		"/Users/neilmoore67/Work/personal-homepage/_posts/2014-11-13-dinner.markdown",
		"/Users/neilmoore67/Work/personal-homepage/_drafts/2014-11-19-dynamic-dispatch-thoughts.markdown",
		"/Users/neilmoore67/Work/personal-homepage/_posts/2014-11-19-dynamic-dispatch-thoughts.markdown",
		"/Users/neilmoore67/Work/personal-homepage/_posts/2014-11-13-welcome-to-jekyll.markdown",
		"/Users/neilmoore67/Work/personal-homepage/trustcom_note.md",
		"/Users/neilmoore67/Work/go/src/github.com/codegangsta/gin/main.go",
		"/Users/neilmoore67/Work/go/src/github.com/codegangsta/gin/lib/test_fixtures/config.json",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot/http/static/css/jquery-ui.structure.min.css",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot/http/static/css/jquery-ui.structure.css",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot/http/static/css/jquery-ui.css",
		"/Users/neilmoore67/Work/go/src/code.google.com/p/go.exp/locale/search/search.go",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot/http/static/js/lib/handlebars-v1.3.0.js",
		"/Users/neilmoore67/Work/go/src/github.com/qrtz/livedev/config.go",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot/http/static/index.html",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot/http/scoot-http.go",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot/http/http",
		"/Users/neilmoore67/Work/go/bin/http",
		"/Users/neilmoore67/Work/go/src/github.com/codegangsta/cli/helpers_test.go",
		"/Users/neilmoore67/Work/go/bin/hello",
		"/Users/neilmoore67/Library/Application Support/Sublime Text 3/Packages/User/Distraction Free.sublime-settings",
		"/Users/neilmoore67/Work/go/src/github.com/codegangsta/cli/app.go",
		"/Users/neilmoore67/Work/go/src/code.google.com/p/go.exp/AUTHORS",
		"/Users/neilmoore67/Work/go/src/code.google.com/p/go.exp/inotify/inotify_linux_test.go",
		"/Users/neilmoore67/Work/go/src/github.com/andreaskoch/go-fswatch/.travis.yml",
		"/Users/neilmoore67/Work/go/src/github.com/codegangsta/envy/.gitignore",
		"/Users/neilmoore67/Work/go/src/github.com/gorilla/mux/regexp.go",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot/http/static/js/app.js",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot/http/static/js/views/gamestateview.js",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot/http/static/templates/templates.js",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot/Makefile",
		"/Users/neilmoore67/Work/go/bin/gin",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot/http/static/js/models/prototypeitem.js",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot/http/static/js/models/GameState.js",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot/http/fresh.conf",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot/http/livedev.json",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot/http.go",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/filesync/core.go",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/newmath/sqrt.go",
		"/Users/neilmoore67/Work/go/src/code.google.com/p/go.exp/fsnotify/example_test.go",
		"/Users/neilmoore67/Work/go/src/code.google.com/p/go.exp/ebnf/ebnf_test.go",
		"/Users/neilmoore67/Work/go/src/code.google.com/p/go.exp/ebnf/ebnf.go",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/filesync/TODO",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/sync/TODO",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/filesync/runners/core_run.go",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/sync/core.go",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/sync/core_run.go",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/newmath/sqrt_test.go",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/hello/hello.go",
		"/Users/neilmoore67/Library/Application Support/Sublime Text 3/Packages/DashDoc/DashDoc.sublime-settings",
		"/Users/neilmoore67/Work/go/src/bigoh.co.uk/user/hello/hello.go",
		"/Users/neilmoore67/Library/Application Support/Sublime Text 3/Packages/GoSublime/USAGE.md",
		"/Users/neilmoore67/Library/Application Support/Sublime Text 3/Packages/GoSublime/9o.md",
		"/Users/neilmoore67/Work/rust/dice/TODO",
		"/Users/neilmoore67/Work/rust/dice/dice_louis.rs",
		"/Users/neilmoore67/Work/rust/dice/dice.rs",
		"/Users/neilmoore67/Downloads/mooreacc.mooo.com.bat",
		"/Users/neilmoore67/Work/rust/dice/hello.rs"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"stone",
			"std::unique_ptr",
			"boost",
			"post_url",
			"unique_ptr",
			"objectStuff5",
			"site-header",
			"site-headers",
			"site-footer",
			"~~~",
			"~~~ cplusplus",
			"5",
			"PDF",
			"UpdateChan",
			"BibTeX",
			"food.svg",
			"getTemplateAjax",
			"home",
			"registerHelper",
			"expression",
			"Passable",
			"fmt",
			"\"\n",
			"LocalFS",
			"updateChan",
			"(\n",
			"strconv",
			"count",
			"needle",
			", sorted : false",
			"Die",
			"1500",
			"tuple"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"{% endhighlight %}",
			"{% highlight c++ %}",
			"[PDF](/resources/aicom.pdf)",
			"",
			"UpdateChan"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 19,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "_config.yml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 384,
						"regions":
						{
						},
						"selection":
						[
							[
								384,
								384
							]
						],
						"settings":
						{
							"syntax": "Packages/YAML/YAML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "README",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 94,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "http://kramdown.gettalong.org/syntax.html",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "about.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 392,
						"regions":
						{
						},
						"selection":
						[
							[
								392,
								392
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "publications.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3565,
						"regions":
						{
						},
						"selection":
						[
							[
								205,
								205
							]
						],
						"settings":
						{
							"sorttabs_lastactivated": 1438285754.56,
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "_posts/2014-11-19-vector-append.markdown",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3861,
						"regions":
						{
						},
						"selection":
						[
							[
								2135,
								2135
							]
						],
						"settings":
						{
							"function_name_status_row": 68,
							"parser": "github",
							"sorttabs_lastactivated": 1443865833.46,
							"syntax": "Packages/Markdown/Markdown.tmLanguage",
							"target": "browser"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "_posts/2014-11-30-objects-and-pointers.markdown",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8925,
						"regions":
						{
						},
						"selection":
						[
							[
								6312,
								6312
							]
						],
						"settings":
						{
							"sorttabs_lastactivated": 1439368938.04,
							"syntax": "Packages/Markdown/Markdown.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "_posts/obj_ptrs_1_code/sixth.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 443,
						"regions":
						{
						},
						"selection":
						[
							[
								346,
								346
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"sorttabs_lastactivated": 1438526250.48,
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "_posts/obj_ptrs_2_code/unique.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 588,
						"regions":
						{
						},
						"selection":
						[
							[
								354,
								354
							]
						],
						"settings":
						{
							"sorttabs_lastactivated": 1438633789.65,
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "_posts/obj_ptrs_2_code/type_erasure_with_inherit.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1213,
						"regions":
						{
						},
						"selection":
						[
							[
								1164,
								1164
							]
						],
						"settings":
						{
							"sorttabs_lastactivated": 1438634564.77,
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 316.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "_posts/obj_ptrs_2_code/type_erasure.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 798,
						"regions":
						{
						},
						"selection":
						[
							[
								475,
								475
							]
						],
						"settings":
						{
							"sorttabs_lastactivated": 1439190037.84,
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "_posts/obj_ptrs_1_code/fifth.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 628,
						"regions":
						{
						},
						"selection":
						[
							[
								181,
								181
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"sorttabs_lastactivated": 1438544344.38,
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "_posts/obj_ptrs_1_code/fourth.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 176,
						"regions":
						{
						},
						"selection":
						[
							[
								176,
								176
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"sorttabs_lastactivated": 1438544594.63,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "_posts/obj_ptrs_1_code/third.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 261,
						"regions":
						{
						},
						"selection":
						[
							[
								261,
								261
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"sorttabs_lastactivated": 1438544342.29,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "_posts/obj_ptrs_1_code/second.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 163,
						"regions":
						{
						},
						"selection":
						[
							[
								163,
								163
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"sorttabs_lastactivated": 1438544339.1,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "_posts/obj_ptrs_1_code/first.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 162,
						"regions":
						{
						},
						"selection":
						[
							[
								162,
								162
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"sorttabs_lastactivated": 1438544343.93,
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "_posts/obj_ptrs_1_code/earlydefs.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 388,
						"regions":
						{
						},
						"selection":
						[
							[
								232,
								232
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"sorttabs_lastactivated": 1438523578.08,
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "_posts/obj_ptrs_2_code/wrapper.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1083,
						"regions":
						{
						},
						"selection":
						[
							[
								340,
								340
							]
						],
						"settings":
						{
							"sorttabs_lastactivated": 1438286454.14,
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "_posts/obj_ptrs_2_code/type_erasure.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 685,
						"regions":
						{
						},
						"selection":
						[
							[
								685,
								685
							]
						],
						"settings":
						{
							"sorttabs_lastactivated": 1438285859.8,
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "_posts/obj_ptrs_2_code/unique_hetero.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 683,
						"regions":
						{
						},
						"selection":
						[
							[
								683,
								683
							]
						],
						"settings":
						{
							"sorttabs_lastactivated": 1438285766.28,
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "_posts/2015-03-16-wedding-honeymoon.markdown",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7813,
						"regions":
						{
						},
						"selection":
						[
							[
								6336,
								6336
							]
						],
						"settings":
						{
							"function_name_status_row": 118,
							"parser": "github",
							"sorttabs_lastactivated": 1443868739.67,
							"syntax": "Packages/Markdown/Markdown.tmLanguage",
							"target": "browser",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2102.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "_posts/2015-03-29-TT-scorer.markdown",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8737,
						"regions":
						{
						},
						"selection":
						[
							[
								5845,
								5634
							]
						],
						"settings":
						{
							"sorttabs_lastactivated": 1439368935.96,
							"syntax": "Packages/Markdown/Markdown.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "_posts/2015-04-6-types.markdown",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8672,
						"regions":
						{
						},
						"selection":
						[
							[
								8668,
								8668
							]
						],
						"settings":
						{
							"sorttabs_lastactivated": 1439368934.18,
							"syntax": "Packages/Markdown/Markdown.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "_posts/2015-06-10-objects-and-pointers-2.markdown",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4523,
						"regions":
						{
						},
						"selection":
						[
							[
								73,
								73
							]
						],
						"settings":
						{
							"sorttabs_lastactivated": 1439368954.91,
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "_posts/2015-08-10-talk-slides.markdown",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 479,
						"regions":
						{
						},
						"selection":
						[
							[
								335,
								335
							]
						],
						"settings":
						{
							"function_name_status_row": 7,
							"parser": "github",
							"sorttabs_lastactivated": 1443865511.5,
							"syntax": "Packages/Markdown/Markdown.tmLanguage",
							"target": "browser"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "_posts/2015-06-10-objects-and-pointers-2 copy.markdown",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4523,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"sorttabs_lastactivated": 1439190455.23,
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "_posts/obj_ptrs_2_code/unique.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 630,
						"regions":
						{
						},
						"selection":
						[
							[
								506,
								506
							]
						],
						"settings":
						{
							"sorttabs_lastactivated": 1438285857.83,
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "/Users/neilmoore67/Work/scala-cource/doodle-develop/README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2350,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "Gemfile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 92,
						"regions":
						{
						},
						"selection":
						[
							[
								92,
								92
							]
						],
						"settings":
						{
							"syntax": "Packages/Ruby/Ruby.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "_site/personal/2015/03/16/wedding-honeymoon.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15937,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 539,
						"regions":
						{
						},
						"selection":
						[
							[
								190,
								222
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "_layouts/default.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 248,
						"regions":
						{
						},
						"selection":
						[
							[
								144,
								144
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "_includes/analytics.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 408,
						"regions":
						{
						},
						"selection":
						[
							[
								408,
								408
							]
						],
						"settings":
						{
							"auto_name": "<script>",
							"syntax": "Packages/HTML/HTML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "_includes/mailchimp.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 616,
						"regions":
						{
						},
						"selection":
						[
							[
								616,
								616
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "_layouts/post.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1220,
						"regions":
						{
						},
						"selection":
						[
							[
								407,
								407
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "_includes/head.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1002,
						"regions":
						{
						},
						"selection":
						[
							[
								578,
								578
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "_includes/footer.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3100,
						"regions":
						{
						},
						"selection":
						[
							[
								3063,
								3063
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 36,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18575,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										232,
										243
									],
									[
										389,
										400
									],
									[
										605,
										616
									],
									[
										777,
										788
									],
									[
										977,
										988
									],
									[
										1134,
										1145
									],
									[
										1346,
										1357
									],
									[
										1516,
										1527
									],
									[
										1896,
										1907
									],
									[
										2053,
										2064
									],
									[
										2284,
										2295
									],
									[
										2454,
										2465
									],
									[
										2652,
										2663
									],
									[
										2809,
										2820
									],
									[
										3034,
										3045
									],
									[
										3202,
										3213
									],
									[
										3474,
										3482
									],
									[
										3954,
										3962
									],
									[
										4562,
										4577
									],
									[
										4790,
										4805
									],
									[
										4930,
										4945
									],
									[
										5010,
										5025
									],
									[
										5253,
										5268
									],
									[
										5344,
										5359
									],
									[
										5440,
										5455
									],
									[
										5807,
										5822
									],
									[
										6652,
										6667
									],
									[
										7808,
										7823
									],
									[
										8351,
										8366
									],
									[
										9003,
										9018
									],
									[
										9080,
										9095
									],
									[
										9162,
										9177
									],
									[
										9590,
										9605
									],
									[
										9818,
										9833
									],
									[
										9958,
										9973
									],
									[
										10038,
										10053
									],
									[
										10281,
										10296
									],
									[
										10372,
										10387
									],
									[
										10468,
										10483
									],
									[
										10835,
										10850
									],
									[
										11680,
										11695
									],
									[
										12836,
										12851
									],
									[
										13379,
										13394
									],
									[
										14212,
										14227
									],
									[
										14440,
										14455
									],
									[
										14580,
										14595
									],
									[
										14660,
										14675
									],
									[
										14903,
										14918
									],
									[
										14994,
										15009
									],
									[
										15090,
										15105
									],
									[
										15457,
										15472
									],
									[
										16302,
										16317
									],
									[
										17458,
										17473
									],
									[
										18001,
										18016
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								13955,
								13955
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 7,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"sorttabs_lastactivated": 1438285852.87,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 5610.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "_sass/_layout.scss",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4374,
						"regions":
						{
						},
						"selection":
						[
							[
								193,
								193
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "untitled.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 73,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "_sass/_syntax-highlighting.scss",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3946,
						"regions":
						{
						},
						"selection":
						[
							[
								3944,
								3944
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "CNAME",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15,
						"regions":
						{
						},
						"selection":
						[
							[
								15,
								15
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.9o:///Users/neilmoore67/Work/go/src/bigoh.co.uk/filesync":
	{
		"height": 240.0
	},
	"output.9o:///Users/neilmoore67/Work/go/src/bigoh.co.uk/filesync/benchmark":
	{
		"height": 244.0
	},
	"output.9o:///Users/neilmoore67/Work/go/src/bigoh.co.uk/filesync/example":
	{
		"height": 336.0
	},
	"output.9o:///Users/neilmoore67/Work/go/src/bigoh.co.uk/filesync/runners":
	{
		"height": 100.0
	},
	"output.9o:///Users/neilmoore67/Work/go/src/bigoh.co.uk/filesync/test":
	{
		"height": 229.0
	},
	"output.9o:///Users/neilmoore67/Work/go/src/bigoh.co.uk/hello":
	{
		"height": 216.0
	},
	"output.9o:///Users/neilmoore67/Work/go/src/bigoh.co.uk/newmath":
	{
		"height": 195.0
	},
	"output.9o:///Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot":
	{
		"height": 300.0
	},
	"output.9o:///Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot/http":
	{
		"height": 402.0
	},
	"output.9o:///Users/neilmoore67/Work/go/src/bigoh.co.uk/scoot/test":
	{
		"height": 297.0
	},
	"output.9o:///Users/neilmoore67/Work/go/src/bigoh.co.uk/sync":
	{
		"height": 222.0
	},
	"output.9o:///Users/neilmoore67/Work/go/src/bigoh.co.uk/user/hello":
	{
		"height": 124.0
	},
	"output.9o:///Users/neilmoore67/Work/go/src/code.google.com/p/go.example/hello":
	{
		"height": 100.0
	},
	"output.GoSublime-main-output":
	{
		"height": 100.0
	},
	"output.MarGo-output":
	{
		"height": 100.0
	},
	"output.exec":
	{
		"height": 240.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 317.0
	},
	"pinned_build_system": "",
	"project": "untitled.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"third",
				"_posts/obj_ptrs_1_code/third.cpp"
			],
			[
				"non",
				"non-virtual-objects.hpp"
			],
			[
				"honey",
				"_posts/2015-03-16-wedding-honeymoon.markdown"
			],
			[
				"hone",
				"_site/personal/2015/03/16/wedding-honeymoon.html"
			],
			[
				"thumbnal",
				"_plugins/thumbnail.rb"
			],
			[
				"app",
				"src/bigoh.co.uk/scoot/http/static/js/app.js"
			],
			[
				"game",
				"src/bigoh.co.uk/scoot/http/static/js/views/gamestateview.js"
			],
			[
				"gmae",
				"src/bigoh.co.uk/scoot/http/static/js/models/gamestate.js"
			],
			[
				"gamestate",
				"src/bigoh.co.uk/scoot/http/static/js/views/gamestateview.js"
			],
			[
				"css",
				"src/bigoh.co.uk/scoot/http/static/css/style.css"
			],
			[
				"handlebars",
				"src/bigoh.co.uk/scoot/http/static/templates/gameview.handlebars"
			],
			[
				"hane",
				"src/bigoh.co.uk/scoot/http/static/js/lib/handlebars-v1.3.0.js"
			],
			[
				"http",
				"src/bigoh.co.uk/scoot/http/scoot-http.go"
			],
			[
				"squ",
				"src/bigoh.co.uk/scoot/squares.go"
			],
			[
				"handle",
				"src/bigoh.co.uk/scoot/http/static/templates/gameview.handlebars"
			],
			[
				"square",
				"src/bigoh.co.uk/scoot/squares.go"
			],
			[
				"gamest",
				"src/bigoh.co.uk/scoot/http/static/js/models/gamestate.js"
			],
			[
				"",
				"src/bigoh.co.uk/scoot/http/static/css/style.css"
			],
			[
				"scoo",
				"src/bigoh.co.uk/scoot/http/scoot-http.go"
			],
			[
				"app.js",
				"src/bigoh.co.uk/scoot/http/static/js/app.js"
			],
			[
				"make",
				"src/bigoh.co.uk/scoot/Makefile"
			],
			[
				"gmaestate",
				"src/bigoh.co.uk/scoot/http/static/js/models/gamestate.js"
			],
			[
				"die",
				"~/Work/rust/dice/dice.rs"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 127.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"register",
				"registerHelper"
			],
			[
				"Game",
				"Game"
			],
			[
				"Score",
				"Score"
			],
			[
				"move",
				"Moves"
			],
			[
				"Coord",
				"Coord"
			]
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 379.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
